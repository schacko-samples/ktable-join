spring.application.name: stream-table-sample

spring.cloud.stream.bindings.t2_cashflow_stream_in.destination=tier2.cashflow
spring.cloud.stream.bindings.t2_cashflow_stream_in.consumer.useNativeDecoding=true

spring.cloud.stream.bindings.t2_contract_stream_in.destination=tier2.contract
spring.cloud.stream.bindings.t2_contract_stream_in.consumer.useNativeDecoding=true

spring.cloud.stream.bindings.t3_joined_out.destination=tier3.joined
spring.cloud.stream.bindings.t3_joined_out.producer.useNativeEncoding=true

#Serdes
spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde

spring.cloud.stream.kafka.streams.bindings.t2_cashflow_stream_in.consumer.valueSerde=com.example.ktablejoin.CashflowSerde
spring.cloud.stream.kafka.streams.bindings.t2_contract_stream_in.consumer.valueSerde=com.example.ktablejoin.ContractSerde

spring.cloud.stream.kafka.streams.bindings.t3_joined_out.producer.valueSerde=com.example.ktablejoin.ContractSerde

#For testing
spring.cloud.stream.bindings.input.destination=tier3.joined